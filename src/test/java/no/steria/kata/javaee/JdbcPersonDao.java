package no.steria.kata.javaee;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.joda.time.LocalDate;

public class JdbcPersonDao implements PersonDao {

	private ThreadLocal<Connection> threadConnection = new ThreadLocal<Connection>();
	private DataSource dataSource;

	public JdbcPersonDao(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	@Override
	public void createPerson(Person person) {
		String sql = "insert into Person (id, birthDate, firstName, lastName) values (default, ?, ?, ?)";
		try {
			PreparedStatement statement = getConnection().prepareStatement(sql);
			if (person.getBirthDate() != null) {
				statement.setTimestamp(1, asTimestamp(person.getBirthDate()));
			} else {
				statement.setNull(1, Types.TIMESTAMP);
			}
			statement.setString(2, person.getFirstName());
			statement.setString(3, person.getLastName());
			statement.executeUpdate();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

	}

	@Override
	public void beginTransaction() {
		try {
			threadConnection.set(dataSource.getConnection());
			getConnection().setAutoCommit(false);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public void endTransaction(boolean commit) {
		try {
			if (commit) {
				getConnection().commit();
			} else {
				getConnection().rollback();
			}
			threadConnection.set(null);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public List<Person> findPeople(String nameQuery) {
		try {
			return mapResultSetToListOfPerson(queryPeople(nameQuery));
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	private List<Person> mapResultSetToListOfPerson(ResultSet resultSet) throws SQLException {
		ArrayList<Person> result = new ArrayList<Person>();
		while (resultSet.next()) {
			String firstName = resultSet.getString("firstName");
			String lastName = resultSet.getString("lastName");
			Person person = Person.withName(firstName, lastName);
			Timestamp timestamp = resultSet.getTimestamp("birthDate");
			if (!resultSet.wasNull()) {
				person.setBirthDate(new LocalDate(timestamp));
			}
			result.add(person);
		}
		return result;
	}

	private ResultSet queryPeople(String nameQuery) throws SQLException {
		if (nameQuery == null) {
			return getConnection().createStatement().executeQuery("select id, birthDate, firstName, lastName from Person");
		}
		String sql = "select id, birthDate, firstName, lastName from Person where (lower(firstName) like ? or lower(lastName) like ?)";
		PreparedStatement statement = getConnection().prepareStatement(sql);
		statement.setString(1, "%" + nameQuery + "%");
		statement.setString(2, "%" + nameQuery + "%");
		return statement.executeQuery();
	}

	private Connection getConnection() {
		if (threadConnection .get() == null) {
			throw new IllegalStateException("Call beginTransaction first");
		}
		return threadConnection.get();
	}

	@Override
	public List<Person> searchByMinimumAge(int minimumAge) {
		String sql = "select id, birthDate, firstName, lastName from Person where birthDate<?";
		try {
			PreparedStatement statement = getConnection().prepareStatement(sql);
			statement.setTimestamp(1, asTimestamp(new LocalDate().minusYears(minimumAge)));
			return mapResultSetToListOfPerson(statement.executeQuery());
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	public void dropTables() {
		executeUpdate("drop table Person if exists");
	}

	public void createTables() {
		executeUpdate("create table Person (id bigint generated by default as identity (start with 1), birthDate date, firstName varchar(255), lastName varchar(255), primary key (id))");
	}

	private void executeUpdate(String statement) {
		try {
			getConnection().createStatement().executeUpdate(statement);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	private static Timestamp asTimestamp(LocalDate localDate) {
		return new Timestamp(localDate.toDateTimeAtStartOfDay().getMillis());
	}


}
